CONFIGURANDO PROYECTO REACT DESDE CEROS

Instalación y configuración de React

Primero debemos instalar las dependencias de react con  -S para guardarlo general
    npm install react react-dom -S 
    npm init -y  => respeta dependencias ya instaladas y configura el repositorio

Ahora crear la estructura del proyecto 
    node_modules <esto se crea con npm init e instalando las dependencias>
    public 
        index.html
    src 
        components
            App.jsx
        styles
            global.scss
        index.js
    .babelrc
    webpack.config.js

Dentro del index.js vamos a llamar react y react-dom, e importamos el componente de app y crearemos el recurso de donde se importará la app, esto para mostrar nuestra app dentro de un archivo html 
==>
       import { createRoot } from 'react-dom/client';
const container = document.getElementById('app');
const root = createRoot(container);
root.render(<App tab= "home" />)


Al documento de html que creamos, le creamos una plantilla con el preset de VS => ! y dentro del body ponemos lo siguiente ==>

        <body>
            <div id="app"></div> //este id se conecta con el getElementById de arriba. 
        </body>

y para react vamos a configurar lo siguiente en el documento de App.jsx

        import React from "react";

        const App = () => <h1>Hello beautiful world seen from React!</h1>

        export default App;

este APP se conecta con el render que se hará en Index.js 

-------------------------------------------------------------------------------


------------------------------------------
Configuración de Babel y Webpack 5 para React.js

primero instalamos babel 
    npm i @babel/core @babel/preset-env @babel/preset-react babel-loader -D

vamos a crear el documento .babelrc dentro de la carpeta global y le agregamos un objeto con los presets del babel que usaremos
dentro de .babelrc =>
    {
    "presets": [
    "@babel/preset-env",
    "@babel/preset-react"
]
}

Ahora vamos a instalar webpack => 

npm i webpack webpack-cli webpack-dev-server -D

y ahora creamos el archivo de configuración de webpack en la carpeta general webpack.config.js

const path = require('path');

module.exports = {
    entry: './src/index.js',
    output: {
        path: path.resolve(__dirname, 'dist'),
        filename: 'bundle.js',
    },
    resolve: {
        extensions: ['.js', '.jsx']
    },
    module:{
        rules: [
            {
                test: /\.(js|jsx)$/,
                exclude: /node_modules/,
                use: {
                    loader: 'babel-loader',
                }
            }
        ]
    },
    devServer: {
        static: { 
            directory: path.join(__dirname, 'dist'),
        },
        compress: true,
        port: 3006
    }
}
------------------------------------------

Configuración de plugins y loaders para React

ahora trabajaremos los loades y los plugins para trabajar con html, en la terminal instalamos 
    npm install html-loader html-webpack-plugin -D
le agregamos una nueva constante al archivo webpack en la parte superior
    const HtmlWebpackPlugin = require('html-webpack-plugin');
y en la parte de reglas vamos a agregar una nueva para usar el loader => 
    {
        test:/\.html$/,
        use: [
            {
                loader: 'html-loader'
            }
        ]
    }
y ahora en el documento de webpack vamos a agregar la sección de plugin y vamos a agregar un nuevo plugin 
    plugins: [
        new HtmlWebpackPlugin({
            template: './public/index.html',
            filename: './index.html'
        })
    ]

Ahora en el archivo de package.json vamos a crear los nuevos comandos de build y dev 

agregamos  los siguientes  script
    "start": "webpack serve",
    "build": "webpack --mode production",
    "dev": "webpack --mode development",
------------------------------------------
Configuración de Webpack para CSS en React

primero instalamos las dependencias de css, en este caso vamos a instalar css con el preprocesador de SASS

    npm i mini-css-extract-plugin css-loader style-loader sass sass-loader

ahora en el archivo de webpack config agregamos la siguiente configuración 
primero ponemos la constante
    const MiniCssExtractPlugin = require('mini-css-extract-plugin');

ahora agregamos la regla en rules para trabajar con los loaders de css: (expresión regular = test: /\.s[ac]ss$/,)
    {
        test: /\.s[ac]ss$/,
        use: [
            'style-loader',
            'css-loader',
            'sass-loader'
        ]
    }

Ahora agregamos el plugin

    new MiniCssExtractPlugin({
        filename: '[name].css'
    })

ahora creamos una carpeta nueva en la carpeta global llamada 'styles' y dentro de esta misma vamos a crear un archivo llamado global.scss y agregamos la configuración que pondremos en el css en el scss 
y ahora en el documento de index.js vamos a crear otro import para llamar estos estilos 
    import './styles/global.scss';

ahora probamos en local npm run dev
------------------------------------------
Optimización de Webpack para React

Veremos las últimas configuraciones para mandarlo a producción, lo primero que toca hacer es instalar los paquetes que se usarán para la optimización ayudarán a trabajar con css y optimizar el javascript y optimizar el recurso en general

    npm install css-minimizer-webpack-plugin terser-webpack-plugin clean-webpack-plugin -D

acá vamos a crear el documento de webpack para modo desarrollo webpack.config.dev.js
copiamos como esta 

    webpack.config.js ====> webpack.config.dev.js 
y agregamos module exports el modo development 
mode: 'development',

En el modo producción borramos la sección de devserver ya que es solo para desarrollo . 

En el archivo de produccion agregamos las siguientes constantes:
const CssMinimizerPlugin = require('css-minimizer-webpack-plugin');
const TerserPlugin = require('terser-webpack-plugin');
const { cleanWebpackPlugin }= require('clean-webpack-plugin');

agregamos en la sección de module.exports dentro del módulo deoutput => publicPath:"/",
en el módulo de resolve agregamos alias => 
    alias: {'@components' : path.resolve(__dirname, 'src/components'),
    '@styles': path.resolve(__dirname, 'src/styles/')}


agregamos un nuevo plugin 
    new cleanWebpackPlugin(),

ahora debajo de los plugins por fuera, agregamos el módulo de optimización

    optimization: {
        minimize:true,
        minimizer: [
            new CssMinimizerPlugin(),
            new TerserPlugin()
        ]
    }
podemos agregar como módulo el mode: 'production'

ahora falta modificar en package.json en la sección de scripts el contenido de start y build 

    "start": "webpack serve --config webpack.config.dev.js",
      "build": "webpack --config webpack.config.js"


ya está todo listo solo falta probarlo para producción 
------------------------------------------
Crear componentes de html con jsx 

Vamos a crear containers de código html, leído desde archivos .jsx 

primero vamos a crear una carpeta dentro de src que se llamara containers 
Dentro de esta vamos a crear el primer bloque de código, lo vamos a copiar de un proyecto de html y css, estos html tienen dentro del mismo archivo sus estilos. 

Podemos instalar la extensión ES7+ React/Redux/React-Native snippets   para utilizar comandos para acortar react dentro de visualstudiocode. 

imr => import React from ‘react’;
rafce = react arrow function state component;

Class en javascript es una palabra reservada, así que cuando vayamos a utilizar html en jsx debemos cambiar class => className.
Para cambiar todos los class a className seleccionamos un class , ctrl + d  (uno por cada palabra a cambiar )

para traer el codigo html y css vamos primero a crear una carpeta dentro de src llamada containers. 
dentro traeremos los bloques de codigo en html, pero lo traemos como un documento .jsx.

dentro de la carpeta de 'containers' vamos a crear un 'layout.jsx' el cual va a recibir un hijo el cual sera la parte principal del proyecto.
dentro de layout.jsx usamos el comando rafce. 
el div lo modificamos y usamos el comando 'div.layout' (div + nombre del className) para crear un div con className establecido y dentro de este agregamos un hijo {children}.

    import React from 'react'

    const Layout = ({children}) => {
    return (
        <div className="Layout">
            {children}
        </div>
    )
    }

    export default Layout

Vamos a crear un archivo adicional de estilos llamado _vars.scss al cual le vamos a pasar las variables de estilos del proyecto en este caso 
    :root {
    --white: #FFFFFF;
    --black: #000000;
    --very-light-pink: #C7C7C7;
    --text-input-field: #F7F7F7;
    --hospital-green: #ACD9B2;
    --sm: 14px;
    --md: 16px;
    --lg: 18px;
  }
de esta forma vamos a llamarlo en los archivos de estilos que necesitemos.
    
    @import '_vars';

la aplicación la vamos a ir organizando dentro de src/components/App.jsx, 

        Nota : index.html => index.js => App.jsx => layout.jsx => children<containers>. 
dentro de App.jsx vamos a modificar el return que da la app y le vamos a agregar el layout con los  hijos  

        import React from 'react';
        import Layout from '../containers/layout';
        import '../styles/global.scss';

        const App = () => {
            return (
                    <Layout>
                        <login />
                    </Layout>
            );
        };

        export default App;

tambien se le puede agregar un hijo a login, y lo podemos escribir de la siguiente forma 
    <login>hijos</login>
los estilos los vamos a ir agregando dentro de la carpeta styles que se encuentra en src

es necesario hacer un cambio en webpack.config.js, en las reglas vamos a cambiar que cargue solo sass y vamos a aclararle que lea tanto css como scss con el siguiente cambio
    de 'test: /\.s[ac]ss$/', a => test: /\.(css|scss)$/i,
----------
React Router dom

Nos va a permitir separar el proyecto 

primero instalamos React Roeater => npm install react-router-dom

Vamos a modificar la estructura y app la vamos a poner en otra carpeta dentro de src llamada routers. 

Dentro del archivo App.jsx vamos a importar los nodos desde react-router-dom, 
con el siguiente comando 

import { BrowserRouter, Switch, Route, createBrowserRouter } from 'react-router-dom';

el BrowserRouter nos ayudara a encapsular toda la aplicación

vamos a hacer un Switch  (esto solo funciona para react 17 < dos temas mas adelante esta la configuración react18)

            <BrowserRouter>
            <Switch>
                <Layout>
                    <Route exact path='/' element={home} />
                    <Route exact path='/login' element={Login} />
                    <Route exact path='/recovery-password' element={RecoveryPassword} />
                    <Route path="*" element={<NotFound/>} />
                    
                </Layout>
            </Switch>       
        </BrowserRouter>
-----------
Navegación entre rutas
Ahora vamos a crear la estructura de paginas, 

vamos a crear una carpeta nueva dentro de src => pages

esta carpeta contendra las paginas del proyecto. 
dentro de pages vamos a crear los archivos Home.jsx y NotFound.jsx 

dentro de Home.jsx 
            import React from 'react';

            const Home = () => {
            return (
                <div><h1>React Shop</h1></div>
            )
            }

            export default Home

dentro de NotFound.jsx
            import React from 'react'

        const NotFound = () => {
        return (
            <div>NotFound, Error 404. </div>
        )
        }

        export default NotFound

Dentro de webpack dento de module.exports, y dentro de output agregamos un valos para publicPath

	output: {
		path: path.resolve(__dirname, 'dist'),
		filename: 'bundle.js',
		publicPatch:'/',
	},

y debajo de plugins poner devServer, este ayudara a guiar la aplicación. 


        devServer: {
		historyApiFallback: true,
        }

la App.jsx la vamos a dejar configurada de la siguiente forma REACT18UPDATE=>

        import React from 'react';
        import { BrowserRouter, Route, Routes, } from 'react-router-dom';
        import Layout from '../containers/layout.jsx';
        import '../styles/global.scss';
        import Login from '../containers/login.jsx';
        import RecoveryPassword from '../containers/RecoveryPassword.jsx';
        import Home from '../pages/Home.jsx';
        import NotFound from '../pages/NotFound.jsx';
        import '../styles/global.scss';

        const App = () => {
            return ( 
            
                <BrowserRouter>
                        <Layout>
                            <Routes>
                            <Route index path="/" element={<Home/>} />
                            <Route path="/login" element={<Login/>} />
                            <Route path="/recovery-password" element={<RecoveryPassword/>} />
                            <Route path="*" element={<NotFound/>} /> 
                        </Routes> 
                        </Layout>       
                </BrowserRouter>
                    
            );
        }

        export default App;

------------------------------------------
Header en todas la rutas, dentro de src en la carpeta de components vamos a crear un archivo llamado header.jsx
------------------------------------------
Las carpetas se van a organizar de la siguiente forma dentro de src y van de menor a mayor, o de atomo a organismos
componentes=> pequeños componentes
containter => union de pequeños componentes
Paginas=> union de Containers. 


------------------------------------------
Tipos de componentes en React: stateful vs. stateless

Statefull
primero importamos a {useState} from 'react' a la pagina deseada. 

const [name, setName] = useState('Hola');
y queda de la siguiente forma el ejemplo=>

import React, { useState } from 'react';

const Button = () => {
    const [name, setName] = useState('Hola Mundo');
    return (
        <div>
            <h1>{name}</h1>
        </div>
    )
}
;
 un objeto sin estado =?> 

 import react from 'react';
 const Button = () => (
    <div>
    <h1>buton</>
    <div>
 )

------------------------------------------
Imágenes y alias en Webpack

primero se debe identificar el tipo de archivo de las imagenes que queremos procesar y copiar al proyecto 
dentro de webpack.config.js vamos a crear unna regla test para que pueda validar esos archivos. agregamos
            {
				test: /\.(png|svg|jpg|gif)$/,
			},
y con esto nos aseguramos de que nuestras imagenes se procesen de forma adecuada. 

dentro de resolve vamos a crear una regla, y es configurar los alias dentro de esta misma 
    resolve: {
        extensions: ['.js','.jsx'],
        alias: {
            '
        }
    }


queda de la siguiente forma resolve: 
resolve: {
		extensions: ['.js', '.jsx'],
		alias: {
			'@components': path.resolve(__dirname, '/src/components/'),
			'@containers': path.resolve(__dirname, '/src/containers/'),
			'@pages': path.resolve(__dirname, '/src/pages/'),
			'@icons' : path.resolve(__dirname, 'src/assets/icons/'),
			'@logos' : path.resolve(__dirname, 'src/assets/logos/')
		}
	},

------------------------------------------
React.useState

Se utiliza para cambiar el estado de un objeto por otro. 

Codigo inicial const [cart, setCart] = useState('');
	const handleClick = () => {
		setCart('Agregado')
	}

Codigo final <figure className="figure-click" onClick={handleClick}>
					<img src={addtocart} alt="" />
				</figure>
				{cart} 




import React, { useState } from 'react';
import '../styles/ProductItem.scss';

import addtocart from '@icons/bt_add_to_cart.svg';

const ProductItem = () => {
	const [cart, setCart] = useState('');
	const handleClick = () => {
		setCart('Agregado')
	}
	return (
		<div className="ProductItem">
			<img src="https://images.pexels.com/photos/3394650/pexels-photo-3394650.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1" alt="" />
			<div className="product-info">
				<div>
					<p>$120,000</p>
					<p>Diadema Gamer</p>
				</div>
				<figure className="figure-click" onClick={handleClick}>
					<img src={addtocart} alt="" />
				</figure>
				{cart}
			</div>
		</div>
	);
}

export default ProductItem;


------------------------------------------
Toggle del menú

vamos a crear la apertura y cierre del menú, para esto necesitamos configurar varios elementos.
    1. importar => import React , { useState } from 'react';
    2.Al iniciar el bloque de codigo de jsx al iniciar la funcion declararemos una constante para esta acción. 
        Dentro del primer braket y el return 
            const [toggle,setToggle] = useState(false);
            const handleToggle = () => {
                setToggle(!toggle);    // este ! ayuda a que cambie de estado, y vuelva al anterior //
            }
    3.Ahora toca configurar donde se desea generar el cambio: 


------------------------------------------
Consumiendo APIS

rapidapi.com central de APIS

en el documento de ProductList.jsx agrergamos primero un llamado a la API 
const API = 'https://api.escuelajs.co/api/v1/products';

despues se le agrega un estado un estado 
const ProductList = () => {
  const [product, setProducts] = useState([]);

y adisionalmente dejaremos configurado un use effect para que este maneje los datos de forma organizada 
vamos a instalar axios npm install axios

tambien vamos a instalar 'npm i @babel/plugin-transform-runtime'

ahora en el documento de babel vamos a llmar el plugin para que se ejecute correctamente
    {
    "presets": [
        "@babel/preset-env",
        "@babel/preset-react"
    ], 
    "plugins": [
        "@babel/plugin-transform-runtime"
    ]
}
.
Es necesario actualizar el index del proyecto por que react 18 ya no funciona con el comando reactDom.render.  

import { createRoot } from 'react-dom/client';
const container = document.getElementById('app');
const root = createRoot(container);
root.render(<App tab= "home" />)

esta es la nueva forma de importar y renderizar la app

 al codigo en Productlist que es el contenedor de la lista de productos se deja de esta forma 

        import React , { useEffect , useState } from 'react';
        import ProductItem from '@components/ProductItem';
        import '@styles/ProductList.scss';
        import axios from 'axios';

        const API = 'https://api.escuelajs.co/api/v1/products';


        const ProductList = () => {
        const [products, setProducts] = useState([]);

        useEffect(async () => {
            const response = await axios(API);
            setProducts(response.data);
            }, [])
        
        return (
            <div><section className="main-container">
            <div className="ProductList">
            {products.map (product => (
                <ProductItem />
            ))}
            
            </div>
        </section>
        </div>
        )
}

export default ProductList


------------------------------------------

Custom Hooks para la tienda

Primero vamos a crear una carpeta dentro de src => 'hooks' 
y dentro vamos a iniciar un archivo 'useGetProducts.js'  este archivo servira como el primer recibidor de informacion 
este sera el archivo de donde sacamos cada segmento de informacion que se llegue a solicitar. 

import { useEffect , useState } from 'react';
import axios from 'axios';

const useGetProducts = (API) => {
    const [products, setProducts] = useState([]);

    useEffect(async () => {
        const response = await axios(API);
        setProducts(response.data);
        }, []);
    return products;
    }
export default useGetProducts;

despues productlist queda de esta forma
import React from 'react';
import ProductItem from '@components/ProductItem';
import '@styles/ProductList.scss';
import useGetProducts from '../hooks/useGetProducts';


const API = 'https://api.escuelajs.co/api/v1/products?offset=0&limit=14';


const ProductList = () => {
  const products = useGetProducts(API)
  
  return (
    <section className="main-container">
    <div className="ProductList">
      {products.map(product => (
        <ProductItem product={product} key={product.id} />
      ))}
      
    </div>
  </section>

  )
}

export default ProductList y product item queda de la siguiente forma 

import React, { useState } from 'react';
import '../styles/ProductItem.scss';

import addtocart from '@icons/bt_add_to_cart.svg';

const ProductItem = ({product}) => {
	const [cart, setCart] = useState('');
	const handleClick = () => {
		setCart('Agregado')
	}
	return (
		<div className="ProductItem">
			<img src={product.images[0]} alt= {product.title} />
			<div className="product-info">
				<div>
					<p>${product.price}</p>
					<p>{product.title}</p>
				</div>
				<figure className="figure-click" onClick={handleClick}>
					<img src={addtocart} alt="" />
				</figure>
				{cart}
			</div>
		</div>
	);
}

export default ProductItem;

------------------------------------------
useRef y formularios

Hooks 'useRef', para capturar usuarios de login y sus elementos 

Lo primero vamos a traer useRef 

import React, { useRef } from 'react';

al abrir el corchete agregaremos el llamado a use ref 
    const form = useRef(null);
Seguido en cada valor que deseemos recibir o conectar vamos a agregar el comando ref={}

Ahora vamos a crear una funcion que nos va a permit maneajr el summit del formulario, vamos a usar formdata que hace parte de javascript, formdata permitira instancear todos los elementos que se encuentran dentro de un formulario. 

Podemos mandar todo el objeto que se forma con formdata al backend y de esta forma hacerlo mas seguro 

los id del form es necesario cambiarlos por name, vamos a crear esta funcion que llamara los nuevos name

const form = useRef(null);

	const handleSubmit = (event) => {
		event.preventDefault();
		const formData = new FormData(form.current);
		const data = {
			usename: formData.get('email'),
			password: formData.get('password')
		}
		console.log(data);
	}


y el nuevo form va a quedar de la siguiente forma 


	return (
		<div className="Login">
			<div className="Login-container">
				<img src={logo} alt="logo" className="logo" />
				<form action="/" className="form" ref={form}>
					<label htmlFor="email" className="label">Email address</label>
					<input type="text" name="email" placeholder="platzi@example.cm" className="input input-email" />
					<label htmlFor="password" className="label">Password</label>
					<input type="password" name="password" placeholder="*********" className="input input-password" />
					<button
						onClick={handleSubmit}
						className="primary-button login-button">
						Log in
					</button>
					<a href="/">Forgot my password</a>
				</form>
				<button
					className="secondary-button signup-button"
				>
					Sign up
				</button>
			</div>
		</div >
	);
}

el necesario al final del formato configurar la orden del comando handleSubmit, y le ponemos una accion onclick

------------------------------------------

React Context 

nos permite conectar toda la app por medio de este contexto con esto podremos acceder a un estado establecido. 
Un ejemplo es que sirve para que la informacion que sale al agregar al carrito de compras se efectue y funcione
vamos a crear una carpeta en src que se llama 'context', dentro crearemos el archivo AppContext.js, en este archivo es donde va a alojarse la información que vamos cargando. 

en este documento agregaremos el codigo 

import React from 'react';

const Appcontext = React.createContext({});

export default Appcontext;

y dentro de App.jsx que es donde tenemos todo el directorio de paginas de la App vamos a encapsular todo el BrowserRouter entro de <AppContext.Provider value={}>

Así queda el codigo hasta el momento import React from 'react';
import { BrowserRouter, Route, Routes, } from 'react-router-dom';
import Layout from '@containers/layout.jsx';
import Home from '@pages/Home.jsx';
import Login from '@pages/login.jsx';
import PasswordRecovery from '@pages/PasswordRecovery';
import SendEmail from '@pages/SendEmail';
import NewPassword from '@pages/NewPassword';
import MyAccount from '@pages/MyAccount';
import CreateAccount from '@pages/CreateAccount';
import Checkout from '@pages/Checkout';
import Orders from '@pages/Orders';
import '@styles/global.scss';
import NotFound from '@pages/NotFound.jsx';
import AppContext from '@context/AppContext';


const App = () => {
    return ( 
        <AppContext.Provider value ={null}>
            <BrowserRouter>
                <Layout>
                    <Routes>
                    <Route path="/" element={<Home/>} />
                    <Route path="/login" element={<Login/>} />
                    <Route path="/recovery-password" element={<PasswordRecovery/>} />
                    <Route path="/send-email" element={<SendEmail/>} />
                    <Route path="/new-password" element={<NewPassword/>} />
                    <Route path="/account" element={<MyAccount/>} />
                    <Route path="/signup" element={<CreateAccount/>} />
                    <Route path="/checkout" element={<Checkout/>} />
                    <Route path="/orders" element={<Orders/>} />
                    
                    <Route path="*" element={<NotFound/>} /> 
                </Routes> 
                </Layout>       
            </BrowserRouter>
        </AppContext.Provider>    
    );
}

Ahora vamos a crear otro custom hook, iniciamos un archivo 'useInitialState.js' y dentro vamos a agregar la logica de como agrega un dato al carro de compra, usaremos useState einicializaremos la logica en const initialState => 

import { usesState } from 'react';
const initialState = {
    cart: [],
}
const useInitialState = () => {
    const [state, setState] = useState(initialState);
    
    const addToCart = (payload) => {
        setState ({
            ...state,
            cart: [...state.cart, payload]
        });
    };
    return {
        state,
        addToCart
    }
}

export default useInitialState;

Ahora  en  el archivo 'productitem.jsx' en la seccion mas pequeña que recibe cada producto vamos a agregarle una logica distinta a la que teniamos que usaba useState el codigo queda de la siguiente forma: 

    const ProductItem = ({product}) => {
	const { addtocart } = useContext(AppContext);

	const handleClick = () => {
		setCart('Agregado')
	}
	return 
    ...

Ahora dentro de App.jsx vamos a traer esta logica 

primero el import

import useInitialState from '../hooks/useInitialState'; 

App qeda de la siguiente forma 

    import React from 'react';
    import { BrowserRouter, Route, Routes, } from 'react-router-dom';
    import Layout from '@containers/layout.jsx';
    import Home from '@pages/Home.jsx';
    import Login from '@pages/login.jsx';
    import PasswordRecovery from '@pages/PasswordRecovery';
    import SendEmail from '@pages/SendEmail';
    import NewPassword from '@pages/NewPassword';
    import MyAccount from '@pages/MyAccount';
    import CreateAccount from '@pages/CreateAccount';
    import Checkout from '@pages/Checkout';
    import Orders from '@pages/Orders';
    import NotFound from '@pages/NotFound.jsx';
    import AppContext from '@context/AppContext';
    import useInitialState from '../hooks/useInitialState'; 
    import '@styles/global.scss';

    const App = () => {
        const initialState = useInitialState();
        return ( 
            <AppContext.Provider value ={initialState}>
                <BrowserRouter>
                    <Layout>
                        <Routes>
                        <Route path="/" element={<Home/>} />
                        <Route path="/login" element={<Login/>} />
                        <Route path="/recovery-password" element={<PasswordRecovery/>} />
                        <Route path="/send-email" element={<SendEmail/>} />
                        <Route path="/new-password" element={<NewPassword/>} />
                        <Route path="/account" element={<MyAccount/>} />
                        <Route path="/signup" element={<CreateAccount/>} />
                        <Route path="/checkout" element={<Checkout/>} />
                        <Route path="/orders" element={<Orders/>} />
                        
                        <Route path="*" element={<NotFound/>} /> 
                    </Routes> 
                    </Layout>       
                </BrowserRouter>
            </AppContext.Provider>    
        );
    }

    export default App;

we also modifie ProductItem.jsx AppCOntext.js useInitialState.js 

El documento de ProductItem.jsx queda de la siguiente forma. 
import React, { useContext } from 'react';
import '@styles/ProductItem.scss';
import AppContext from '../context/AppContext';
import addToCartImage from '@icons/bt_add_to_cart.svg';

const ProductItem = ({product}) => {
	const { addToCart } = useContext(AppContext);

	const handleClick = item => {
		addToCart(item)
	}
	return (
		<div className="ProductItem">
			<img src={product.images[0]} alt= {product.title} />
			<div className="product-info">
				<div>
					<p>${product.price}</p>
					<p>{product.title}</p>
				</div>
				<figure className="figure-click" onClick={handleClick(product)}>
					<img src={addToCartImage} alt="Add to cart" />
				</figure>
			</div>
		</div>
	);
}

export default ProductItem;



------------------------------------------

Terminando el carrito de compra

ahora vamos a validar que la información quede conectada, vamos a ver que hasta un item sea agregado y que hasta el header reciba este item. 

Vamos a conectar el numero dentro de header.jsx.
de esta forma ya traemos al Appcontext con la información actualizada
    import AppContext from '../context/' 
    import { useContext } from 'react';

Ahora creamos una constante dentro del contenido de header 

    const { state } = useContext(AppContext);

con esto traemos el AppContext global, y lo convertimos en useContext y { state }

ahora vamos a modificar el dos que teniamos para diseño, vamos a generar un codigo que interactue con la cantidad de objetos que contenga el carrito de compra dentro del AppContext 
cambiamos de <div>2</div> a => 
<div>{state.cart.length > 0 ?  state.cart.lenght : null }</div>
Se va a cambiar que el div que contiene el circulo verde, solo se activara cuando haya un objeto en el carrito de compras para esto dentro de la funcion de traer el No de objetos en el carrito, vamos a anexarle html para que pueda controlar esta objeto. 

Queda de la siguiente forma 

{state.cart.length > 0 ? <div>${state.cart.lenght}</div> : null }

así el circulo asignado al div solo se activara en el¿se momento 

en product item tube que hacer una correccion en el codigo lo dejo completo para comparar hasta este punto 

                import React, { useContext } from 'react';
                import '@styles/ProductItem.scss';
                import AppContext from '../context/AppContext';
                import addToCartImage from '@icons/bt_add_to_cart.svg';

                const ProductItem = ({ product }) => {
                    const { addToCart } = useContext(AppContext);

                    const handleClick = item => {
                        addToCart(item)
                    }
                    return (
                        <div className="ProductItem">
                            <img src={product.images[0]} alt= {product.title} />
                            <div className="product-info">
                                <div>
                                    <p>${product.price}</p>
                                    <p>{product.title}</p>
                                </div>
                                <figure className="figure-click" onClick = { () => handleClick(product)}>
                                    <img src={addToCartImage} alt="Add to cart" />
                                </figure>
                            </div>
                        </div>
                    );
                }

                export default ProductItem;



------------------------------------------

EN orden de compra vamos a agregar la informacipon y la vamos  a conectar con el AppContext, tambien hay una seccion cuando llamamos a los items dentro order item que debemos hacer de forma distinta y es el llamado al item id, para que este en ningun momento llegue a tener un problema con el id solictiado en otras secciones, vamos a asignarle un nombre adicional a este ID dentro de esta seccion 

así queda Myorder.jsx con el llamado de los items que tenemos agregados en el AppContext

import React ,  { useState , useContext }  from 'react';
import OrderItem from '../components/OrderItem';
import '../styles/MyOrder.scss';
import AppContext from '../context/AppContext';
import iconFlechita from '@icons/flechita.svg'


const MyOrder = () => {
	const { state } = useContext(AppContext);

  	return (
   		 <aside className="MyOrder">
			<div className="title-container">
				<img src= {iconFlechita} alt="arrow" />
				<p className="title">My order</p>
			</div>
			<div className="my-order-content">
				{state.cart.map(product  => (
					<OrderItem product={product} key={`orderItem-${product.id}`} /> 
				))}			
				
				<div className="order">
					<p>
						<span>Total</span>
					</p>
					<p>$560.00</p>
				</div>
				<button className="primary-button">
					Checkout
				</button>
			</div>
		</aside>
  )
}

export default MyOrder
------------------------------------------
Suma total del carrito de compra 

Primero creamos una constante para la suma sumTotal y dentro de ella creamos una funcion reducer la cual va a sumar todos los valpres ubicados dentro de precio 

const sumTotal = ( ) => {
		const reducer = (accumalator, currentValue) => accumalator + currentValue.price;
		const sum = state.cart.reduce(reducer, 0);
		return sum;
	}


ya despues simplemente la llamamos como funcion y obtenemos la suma automatica con cada producto que se sume 

<p>${sumTotal()}</p>
------------------------------------------
Eliminar productos del carrito de compras

Logica que nos ayudara a eliminar un elemento del carrito 

primero tenemos que agregar una configuración adicional en initialState : 


------------------------------------------
------------------------------------------
DEPLOY TO GITHUB PAGES by Jameslves

investigar versel beroku 
Nos permitira desplegar un proyecto dentro de un servidor en linea y de esta forma probarlo y tenerlo listo para subirlo a cualquier dominio 

dentro del market place de github 
------------------------------------------






Deploy del proyecto con React.js

ahora vamos a hacer el deploy en netlify

creamos un nuevo sitio, debemos tener el repositorio ya en github 
y lo subimos, corregir errores si es necesario, y si no, ya estará el sitio live. 

------------------------------------------

 